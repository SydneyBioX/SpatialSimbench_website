---
title: "Results"
toc: false
---




```{ojs}
//| echo: false

funkyheatmap = (await require('d3@7').then(d3 => {

  window.d3 = d3;

  window._ = _;

  return import('https://unpkg.com/funkyheatmapjs@0.2.5');

})).default;

```


```{r setup}
#| label: load-packages
#| include: false
#| error: true
#| echo: false

library(tidyverse)
library(funkyheatmap)
library(kableExtra)
library(readr)
library(DT)
library(plotly)
library(jsonlite)
``` 



```{ojs}
//| label: read data
//| warning: false
//| echo: false

//color_by_rank = Inputs.toggle({label: "Color by rank:", value: true})
//scale_column = Inputs.toggle({label: "Minmax column:", value: false})
//show_con = Inputs.toggle({label: "Show control methods:", value: true})

final_data = FileAttachment("./data/final_data2.csv").csv()
column_info = await FileAttachment("./data/column_info_v2.csv").csv()
column_groups = await FileAttachment("./data/column_groups.JSON").json()

palettes = [
    {
        overall: "Greys",
        palette1: "Blues",
        palette2: "Reds",
        palette3: "Greens",
        palette4: "YlOrBr",
        NA: "Greys",
        white6black4: "Greys",
        error_reason: {
          colors: ["#8DD3C7", "#FFFFB3", "#BEBADA", "#FFFFFF"],
          names: ["Memory limit exceeded", "Time limit exceeded", "Execution error", "No error"]
        }
      }
    ][0]     

/* poss_method_ids = method_info
  .map(d => d.method)
  .filter(d => results.map(r => r.method).includes(d))
poss_metric_ids = metric_info
  .map(d => d.metric)
  .filter(d => results.map(r => Object.keys(r.scaled_scores)).flat().includes(d))     */
```

```{ojs}
//| echo: false

function removeLastNColumns(data, n) {
  if (data.length === 0 || n <= 0) return data;

  // Extract the keys of the columns
  const keys = Object.keys(data[0]);

  // Determine the columns to keep
  const columnsToKeep = keys.slice(0, -n);

  // Filter columns for each row
  return data.map(row => {
    const newRow = {};
    columnsToKeep.forEach(key => {
      newRow[key] = row[key];
    });
    return newRow;
  });
}

// Remove the last 4 columns from the data
filteredData = removeLastNColumns(final_data, 6);

function removeLastNItems(array, n) {
  return array.slice(0, -n);
}


// Remove the last 4 items
filteredColumnInfo = removeLastNItems(column_info, 12);

filteredColumnGroups = removeLastNItems(column_groups, 2);

//console.log(filteredColumnGroups)


```
::: {.column-page}
## Results - Heatmap


```{ojs}
//| echo: false
//| column: page


function transpose_list_of_objects(list) {
      return Object.fromEntries(Object.keys(list[0]).map(key => [key, list.map(d => d[key])]))
    }

funkyheatmap(
      transpose_list_of_objects(final_data),
      transpose_list_of_objects(column_info),
      [],
      transpose_list_of_objects(column_groups),
      
      [],
      palettes,
      {
          fontSize: 14,
          rowHeight: 26,
          rootStyle: 'max-width: none',
          colorByRank: true
      }
    );


```



```{ojs}
//| echo: false

viewof metric_ids = Inputs.checkbox(
  Object.keys(final_data[0]),
  {
    label: "Metrics:"
  }
)
```

</details>
::: -->

## Results - Table
```{r}
#| echo: false
#| warning: false
#| column: page

library(tibble)
library(dplyr)

final_data_csv <- read_csv("./data/final_data.csv", show_col_types = FALSE)

final_data_csv$...1 <- NULL

datatable(
  final_data_csv,
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    searching = TRUE,
    autoWidth = FALSE,
    border = TRUE
    
  ),
  filter = "top",
  class = 'stripe compact bordered',
  style = 'bootstrap'
) %>%
  formatRound(columns = which(sapply(final_data_csv, is.numeric)), digits = 2)
```

:::

:::

