[
  {
    "objectID": "supplementary/index.html",
    "href": "supplementary/index.html",
    "title": "Supplementary",
    "section": "",
    "text": "Details of the three evaluations categories with metric and range in this study.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nTask\nTransformation\nMetric\nRange\n\n\n\n\nData properties\nLibrary size\nTMM\nEffective library size\nNo\nNO\nNO\nKernel Density Scores\n[0, infinity) then map to [0, 1]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Paper",
    "section": "",
    "text": "Preprint from bioRxiv\n\nhtml`\n  &lt;iframe src=\"https://www.biorxiv.org/content/10.1101/2024.05.29.596418v1\" width=\"100%\" height=\"700px\" title=\"Research paper\"&gt;&lt;/iframe&gt;\n`;"
  },
  {
    "objectID": "results/index.html",
    "href": "results/index.html",
    "title": "Results",
    "section": "",
    "text": "funkyheatmap = (await require('d3@7').then(d3 =&gt; {\n\n  window.d3 = d3;\n\n  window._ = _;\n\n  //return import('https://unpkg.com/funkyheatmapjs@0.2.5');\n  return import('./js/funkyheatmap.js')\n\n})).default;\n\n//d3 = require(\"d3@7\")\n//import { funkyheatmap } from './js/funkyheatmap.js'\nfinal_data_raw = FileAttachment(\"./data/final_data2.csv\").csv()\n\ncolumn_info = await FileAttachment(\"./data/column_info_v2.csv\").csv()\ncolumn_groups = await FileAttachment(\"./data/column_groups.JSON\").json()\n\npalettes = [\n    {\n        overall: \"Greys\",\n        palette1: \"Blues\",\n        palette2: \"Reds\",\n        palette3: \"Yellows\",\n        palette4: \"YlOrBr\",\n        NA: \"Greys\",\n        white6black4: \"Greys\",\n        error_reason: {\n          colors: [\"#8DD3C7\", \"#FFFFB3\", \"#BEBADA\", \"#FFFFFF\"],\n          names: [\"Memory limit exceeded\", \"Time limit exceeded\", \"Execution error\", \"No error\"]\n        }\n      }\n    ][0]\nfunction removeSuffix(data, column, suffix) {\n  return data.map(row =&gt; {\n    if (row[column].endsWith(suffix)) {\n      row[column] = row[column].replace(new RegExp(suffix + '$'), ''); // Remove the suffix\n    }\n    return row;\n  });\n}\n\n\nfunction removeLastNColumns(data, n) {\n  if (data.length === 0 || n &lt;= 0) return data;\n\n  // Extract the keys of the columns\n  const keys = Object.keys(data[0]);\n\n  // Determine the columns to keep\n  const columnsToKeep = keys.slice(0, -n);\n\n  // Filter columns for each row\n  return data.map(row =&gt; {\n    const newRow = {};\n    columnsToKeep.forEach(key =&gt; {\n      newRow[key] = row[key];\n    });\n    return newRow;\n  });\n}\n\nfinal_data = removeSuffix(final_data_raw, \"method\", \"_rf\");\n//console.log(final_data)\n\n// Remove the last 4 columns from the data\nfilteredData = removeLastNColumns(final_data, 6);\n\n//console.log(filteredData)\n\nfunction removeLastNItems(array, n) {\n  return array.slice(0, -n);\n}\n\n\n// Remove the last 4 items\nfilteredColumnInfo = removeLastNItems(column_info, 12);\n\nfilteredColumnGroups = removeLastNItems(column_groups, 2);\n:::"
  },
  {
    "objectID": "results/index.html#results---heatmap",
    "href": "results/index.html#results---heatmap",
    "title": "Results",
    "section": "Results - Heatmap",
    "text": "Results - Heatmap\n\nfunction transpose_list_of_objects(list) {\n      return Object.fromEntries(Object.keys(list[0]).map(key =&gt; [key, list.map(d =&gt; d[key])]))\n    }\n\nfunkyheatmap(\n      transpose_list_of_objects(final_data),\n      transpose_list_of_objects(column_info),\n      [],\n      transpose_list_of_objects(column_groups),\n      \n      [],\n      palettes,\n      {\n          fontSize: 14,\n          rowHeight: 26,\n          rootStyle: 'max-width: none',\n          colorByRank: true\n      }\n    );"
  },
  {
    "objectID": "results/index.html#results---table",
    "href": "results/index.html#results---table",
    "title": "Results",
    "section": "Results - Table",
    "text": "Results - Table"
  }
]